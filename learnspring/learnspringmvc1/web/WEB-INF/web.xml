<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!-- Servlet过滤器可以动态拦截请求和响应，以变换或者使用包含在请求或者响应中的信息。可以实现：1、在客户端请求访问后端资源之前拦截这些请求。2、在服务器响应发送客户端之前处理这些响应 -->
    <!-- 例如：1、身份验证过滤器 2、加密过滤器 3、数据压缩过滤器。。。 -->
    <!-- spring框架提供过滤器CharacterEncodingFilter 这个过滤器针对每次浏览器进行请求过滤的，然后在其之上添加父类没有的功能即处理字符编码 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- context-param元素声明应用范围内的初始化参数 -->
    <context-param>
        <!-- contextConfigLocation部署applicationContext的xml文件 -->
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>
    <listener>
        <!-- ContextLoaderListeners是spring的监听器，启动web容器时会自动装配applicationContext配置信息 业务层中的class就可以直接引用spring容器中的bean -->
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 若DispatcherServlet拦截"/',则拦截了所有请求，同时对*.js *.jpg等静态文件的访问也拦截了 -->
    <!-- 激活tomcat的的defaultServlet来处理静态文件，要写在DispatcherServlet的前面，让defaultServlet先拦截请求，这样请求就不会进入spring了 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.gif</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.xml</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.map</url-pattern>
    </servlet-mapping>

    <!-- 配置dispatcherServlet -->
    <servlet>
        <!-- 分配名称 -->
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- DispatcherServlet对应的上下文配置，默认为/WEB-INF/[servlet-name]-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup><!-- Servlet的加载顺序 -->
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!--修改为"/"表示捕获所有路径  -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>